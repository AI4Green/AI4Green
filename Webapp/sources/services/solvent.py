from typing import List, Tuple, Union

from sources import models, services
from sources.extensions import db
from sqlalchemy import func


def add(name: str, hazards: str, nc: models.NovelCompound) -> models.Solvent:
    """
    Creates a solvent model in the database.

    Returns:
        Solvent model.
    """
    solvent = models.Solvent(
        name=name,
        flag=5,
        hazard=hazards,
        novel_compound=[nc],
    )
    db.session.add(solvent)
    db.session.commit()
    return solvent


def get_default_list() -> List[models.Solvent]:
    """
    Gets the default list of solvents. I.e., excluding any in a workbook. Used in the demo mode.

    Returns:
        The default list of solvents from CHEM21
    """
    sol_rows = db.session.query(models.Solvent).all()
    return [x for x in sol_rows if x.novel_compound == []]


def get_workbook_list(workbook: models.WorkBook) -> List[models.Solvent]:
    """
    Gets the list of solvents for the active workbook

    Args:
        workbook object of the active workbook

    Returns:
        The default list of solvents from CHEM21 and any solvents added to the workbook
    """
    sol_rows = db.session.query(models.Solvent).all()
    return [
        x
        for x in sol_rows
        if x.novel_compound == []
        or (workbook is not None and x.novel_compound[0].workbook == workbook.id)
    ]


def sustainability_from_primary_key(primary_key: Union[int, Tuple, str]) -> int:
    """
    Returns the CHEM21 sustainability flag for a solvent from the models.solvent.flag
    Args:
        primary_key: the compound primary key may be in multiple formats. resolved to a tuple or int
    Returns:
        integer sustainability flag score for a solvent. Lower number is more hazardous
    """
    # not all compounds have been characterised as solvents and may give an error. Then we stick with the integer system
    # and assign a value of 5 which translates to non-chem21 or unknown

    if services.all_compounds.validate_primary_key(primary_key):
        primary_key = services.all_compounds.primary_key_resolver(primary_key)
        if isinstance(primary_key, int):
            sustainability_phrase = services.solvent.solvent_sustainability(primary_key)
        elif isinstance(primary_key, tuple):
            sustainability_phrase = services.solvent.novel_solvent_sustainability(
                primary_key
            )
    return sustainability_phrase


def novel_solvent_sustainability(primary_key: Tuple) -> int:
    """
    Gets the solvent sustainability flag for a solvent inside the NovelCompound Table
    Args:
        primary_key - tuple of novel compound name workbook id

    Returns:
         The solvent sustainability flag as an integer. Str equivalent defined services/data_export.py
    """
    return (
        db.session.query(models.Solvent.flag)
        .join(models.NovelCompound)
        .filter(func.lower(models.NovelCompound.name) == primary_key[0].lower())
        .join(models.WorkBook)
        .filter(models.WorkBook.id == primary_key[1])
        .scalar()
    )


def solvent_sustainability(primary_key: int) -> int:
    """
    Gets the solvent sustainability flag for a solvent inside the Compound Table
    Args:
        primary_key: autogenerated primary id key for the compound table for the solvent.
    Returns:
         The solvent sustainability flag as an integer. Str equivalent defined services/data_export.py
    """
    return (
        db.session.query(models.Solvent.flag)
        .join(models.Compound)
        .filter(models.Compound.id == primary_key)
        .scalar()
    )
