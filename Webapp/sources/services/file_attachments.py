import base64
import hashlib

from azure.storage.blob import BlobClient, BlobServiceClient
from flask import abort, current_app, request
from sources import db, models, services


def sha256_sum_from_file_uuid(file_uuid: str) -> str:
    """
    Retrieves the SHA-256 hash value from Azure Blob Storage for the file associated with the provided UUID.

    Args:
        file_uuid: A string containing the UUID of the file.

    Returns:
        str: A string containing the hexadecimal representation of the SHA-256 hash.
    """
    blob_client = services.file_attachments.get_blob()
    stream_storage = blob_client.download_blob(uuid=file_uuid)
    file_content = stream_storage.readall()
    return sha256_from_file_contents(file_content)


def sha256_from_file_contents(file_content: bytes) -> str:
    """
    Calculates the SHA-256 hash value from the provided file content.

    Args:
        file_content: Bytes representing the content of the file.

    Returns:
        str: A string containing the hexadecimal representation of the SHA-256 hash.
    """
    sha256_hash = hashlib.sha256()
    sha256_hash.update(file_content)
    return sha256_hash.hexdigest()


def database_object_from_uuid(file_uuid: str) -> models.ReactionDataFile:
    """
    Return a database file object from the UUID (autogenerated unique identifier).

    Args:
        file_uuid (str): A string containing the UUID of the file.

    Returns:
        models.ReactionDataFile: An instance of the ReactionDataFile model representing the database file object.
    """
    return (
        db.session.query(models.ReactionDataFile)
        .filter(models.ReactionDataFile.uuid == file_uuid)
        .first()
    )


def get_blob(file_uuid: str = None) -> BlobClient:
    """
    Returns a binary large object (blob) from Azure Storage using the file UUID and container name.

    Args:
        file_uuid (str, optional): A string containing the UUID of the file. If not provided,
        it is extracted from the request form data.

    Returns:
        BlobClient: An instance of the Azure Blob Client representing the specified blob.
    """
    # connect to azure
    blob_service_client = connect_to_azure_blob_service()
    # connect to blob
    container_name = current_app.config["STORAGE_CONTAINER"]
    if file_uuid is None:
        file_uuid = request.form["uuid"]
    blob_client = blob_service_client.get_blob_client(
        container=container_name, blob=file_uuid
    )
    return blob_client


def connect_to_azure_blob_service() -> BlobServiceClient:
    """
    Returns the Azure blob service client using the connection string from configs.
    From this object, file attachment contents can be accessed by specifying the container name and file uuid.

    Returns:
        BlobServiceClient: An instance of the Azure Blob Service Client.
    """
    return BlobServiceClient.from_connection_string(
        current_app.config["AZURE_STORAGE_CONNECTION_STRING"]
    )


def download_from_blob_client(blob_client: BlobClient, file_uuid: str) -> str:
    """
    Downloads file contents from a BlobClient and verifies integrity based on a provided file UUID.

    Args:
        blob_client: The BlobClient representing the Azure Blob Storage blob.
        file_uuid: A string containing the UUID of the file for integrity verification.

    Returns:
        str: A base64-encoded string representing the file contents after integrity verification.
    """
    stream = blob_client.download_blob()
    file_contents = stream.readall()
    verify_integrity(file_contents, file_uuid)
    file_attachment = base64.b64encode(file_contents).decode()
    return file_attachment


def verify_integrity(file_contents: bytes, file_uuid: str):
    """
    Verifies the integrity of file contents by comparing the SHA-256 checksum with the stored checksum
    in the database for the file associated with the provided UUID.

    Args:
        file_contents: Bytes representing the content of the file.
        file_uuid: A string containing the UUID of the file for integrity verification.

    Raises:
        HTTPException: Raised with a status code of 400 if the integrity check fails.
    """
    file_db_object = database_object_from_uuid(file_uuid)
    if (
        file_db_object.sha256_checksum != "not_available"
    ):  # older files use this default value
        checksum = services.file_attachments.sha256_from_file_contents(file_contents)
        if file_db_object.sha256_checksum != checksum:
            print("invalid checksum. could not verify file integrity")
            abort(400)
