import hashlib

from azure.storage.blob import BlobClient, BlobServiceClient
from flask import current_app, request
from sources import db, models


def generate_sha256sum(blob):
    h = hashlib.sha256()
    b = bytearray(128 * 1024)
    mv = memoryview(b)
    with open(blob, "rb", buffering=0) as f:
        while n := f.readinto(mv):
            h.update(mv[:n])
    return h.hexdigest()


def file_from_uuid(file_uuid: str) -> models.ReactionDataFile:
    """Return database file object from the uuid. (autogenerated unique identifier)"""
    return (
        db.session.query(models.ReactionDataFile)
        .filter(models.ReactionDataFile.uuid == file_uuid)
        .first()
    )


def get_blob(file_uuid: str = None) -> BlobClient:
    """
    Returns a binary large object (blob) from azure storage using the file uuid and container name
    """
    # connect to azure
    blob_service_client = connect_to_azure_blob_service()
    # connect to blob
    container_name = current_app.config["STORAGE_CONTAINER"]
    if file_uuid is None:
        file_uuid = request.form["uuid"]
    blob_client = blob_service_client.get_blob_client(
        container=container_name, blob=file_uuid
    )
    return blob_client


def connect_to_azure_blob_service() -> BlobServiceClient:
    """
    Returns the Azure blob service client using the connection string from configs.
    From this object, file attachment contents can be accessed by specifying the container name and file uuid.
    """
    return BlobServiceClient.from_connection_string(
        current_app.config["AZURE_STORAGE_CONNECTION_STRING"]
    )
