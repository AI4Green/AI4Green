from deepdiff import DeepDiff
from flask import json
from sources import models, services
from sources.extensions import db


def add(person, workbook, reaction_id, field_name, change_details):
    """
    Add an entry to the ReactionEditingHistory table to record a change in a reaction.
    """

    models.ReactionEditingHistory.create(
        person_id=person.id,
        workbook_id=workbook.id,
        reaction_id=reaction_id,
        field_name=field_name,
        change_details=change_details,
    )


def get_history_from_reaction(reaction_id: int):
    """
    Returns the reaction editing history for reaction
    """
    return (
        db.session.query(models.ReactionEditingHistory)
        .filter(models.ReactionEditingHistory.reaction_id == reaction_id)
        .all()
    )


def add_new_reaction(person, workbook, reaction_id, reaction_name):
    """Record that a new reaction was created"""
    # get reaction.id from reaction.reaction_id
    reaction = services.reaction.get_from_reaction_id_and_workbook_id(
        reaction_id, workbook.id
    )

    field_name = "New Reaction"
    change_details = {"reaction_name": reaction_name}  # TODO: come back to this
    add(person, workbook, reaction.id, field_name, json.dumps(change_details))


def edit_reaction(person, reaction, old_reaction_details, new_reaction_details):
    """Record that a reaction was edited through the sketcher autosave or other means"""
    field_name = "Edited Reaction"
    diff = DeepDiff(
        old_reaction_details,
        new_reaction_details,
        ignore_order=True,
        report_repetition=True,
    )
    change_details = diff.to_json()
    add(person, reaction.workbook, reaction.id, field_name, change_details)


def autosave_reaction(person, reaction, old_reaction_details):
    """Record that a reaction was edited through autosave"""
    new_reaction_details = services.reaction.get_reaction_details(reaction)

    # convert json fields to dicts
    old_data_normalised = normalise_json_fields(old_reaction_details)
    new_data_normalised = normalise_json_fields(new_reaction_details)

    # find difference using deepdiff, ignoring reaction_image as this is autogenerated
    diff = DeepDiff(
        old_data_normalised,
        new_data_normalised,
        ignore_order=True,
        report_repetition=True,
    )  # TODO: define paths to exclude
    # print(diff.to_dict())

    field_name = "Edited Reaction"
    change_details = diff.to_json()

    add(person, reaction.workbook, reaction.id, field_name, change_details)


def clone_reaction(person, workbook, new_reaction, old_reaction):
    """Record that a reaction was cloned"""
    field_name = "Cloned Reaction"
    change_details = {
        "old_reaction_id": old_reaction.reaction_id,
        "new_reaction_id": new_reaction.reaction_id,
        "new_reaction_name": new_reaction.name,
    }
    add(person, workbook, old_reaction.id, field_name, json.dumps(change_details))


def delete_reaction(reaction):
    """Record that a reaction was deleted"""
    add(reaction.creator_person, reaction.workbook, reaction.id, "Deleted Reaction", "")


def normalise_json_fields(data):
    """converts dict with json strings to nested dict"""
    for key, value in data.items():
        if isinstance(value, str):
            try:
                json_value = json.loads(value)
                data[key] = json_value
            except (ValueError, TypeError):
                pass
    return data
