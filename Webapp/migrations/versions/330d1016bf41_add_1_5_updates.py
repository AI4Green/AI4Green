"""Add 1.5 updates

Revision ID: 330d1016bf41
Revises: f4207d353ac2
Create Date: 2023-09-22 16:54:51.066963

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "330d1016bf41"
down_revision = "f4207d353ac2"
branch_labels = None
depends_on = None


def upgrade(engine_name: str):
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "ReactionDataFile",
        sa.Column("uuid", sa.Text(), nullable=False),
        sa.Column("reaction", sa.Integer(), nullable=False),
        sa.Column("storage_name", sa.Text(), nullable=False),
        sa.Column("container_name", sa.Text(), nullable=False),
        sa.Column("display_name", sa.Text(), nullable=False),
        sa.Column("time_of_upload", sa.DateTime(), nullable=False),
        sa.Column("file_details", sa.JSON(), nullable=False),
        sa.ForeignKeyConstraint(["reaction"], ["Reaction.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("uuid"),
    )
    with op.batch_alter_table("ReactionDataFile", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_ReactionDataFile_reaction"), ["reaction"], unique=False
        )

    op.create_table(
        "ReactionNote",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("time_of_creation", sa.DateTime(), nullable=False),
        sa.Column("text", sa.Text(), nullable=False),
        sa.Column("author", sa.Integer(), nullable=False),
        sa.Column("reaction", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["author"], ["Person.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["reaction"], ["Reaction.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("ReactionNote", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_ReactionNote_author"), ["author"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_ReactionNote_reaction"), ["reaction"], unique=False
        )

    with op.batch_alter_table("Institution", schema=None) as batch_op:
        batch_op.add_column(sa.Column("time_of_creation", sa.DateTime(), nullable=True))

    with op.batch_alter_table("NovelCompound", schema=None) as batch_op:
        batch_op.add_column(sa.Column("time_of_creation", sa.DateTime(), nullable=True))

    with op.batch_alter_table("Person", schema=None) as batch_op:
        batch_op.add_column(sa.Column("time_of_creation", sa.DateTime(), nullable=True))

    with op.batch_alter_table("Reaction", schema=None) as batch_op:
        batch_op.alter_column(
            "reaction_table_data",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=sa.JSON(),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "summary_table_data",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=sa.JSON(),
            existing_nullable=False,
        )

    with op.batch_alter_table("Solvent", schema=None) as batch_op:
        batch_op.add_column(sa.Column("time_of_creation", sa.DateTime(), nullable=True))

    with op.batch_alter_table("User", schema=None) as batch_op:
        batch_op.add_column(sa.Column("time_of_creation", sa.DateTime(), nullable=True))
        batch_op.alter_column(
            "hazard_colors",
            existing_type=postgresql.JSONB(astext_type=sa.Text()),
            type_=sa.JSON(),
            existing_nullable=False,
        )

    with op.batch_alter_table("WorkBook", schema=None) as batch_op:
        batch_op.add_column(sa.Column("time_of_creation", sa.DateTime(), nullable=True))

    with op.batch_alter_table("WorkGroup", schema=None) as batch_op:
        batch_op.add_column(sa.Column("time_of_creation", sa.DateTime(), nullable=True))

    # ### end Alembic commands ###


def downgrade(engine_name: str):
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("WorkGroup_request", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_WorkGroup_request_workgroup"))
        batch_op.drop_index(batch_op.f("ix_WorkGroup_request_principal_investigator"))
        batch_op.drop_index(batch_op.f("ix_WorkGroup_request_institution"))
        batch_op.create_index(
            "idx_workgroup_request__workgroup", ["workgroup"], unique=False
        )
        batch_op.create_index(
            "idx_workgroup_request__principal_investigator",
            ["principal_investigator"],
            unique=False,
        )
        batch_op.create_index(
            "idx_workgroup_request__institution", ["institution"], unique=False
        )

    with op.batch_alter_table("WorkGroup", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_WorkGroup_institution"))
        batch_op.create_index(
            "idx_workgroup__institution", ["institution"], unique=False
        )
        batch_op.drop_column("time_of_creation")

    with op.batch_alter_table("WorkBook", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_WorkBook_group"))
        batch_op.create_index("idx_workbook__group", ["group"], unique=False)
        batch_op.drop_column("time_of_creation")

    with op.batch_alter_table("WGStatusRequest", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_WGStatusRequest_wg"))
        batch_op.drop_index(batch_op.f("ix_WGStatusRequest_principal_investigator"))
        batch_op.drop_index(batch_op.f("ix_WGStatusRequest_person"))
        batch_op.drop_index(batch_op.f("ix_WGStatusRequest_notification"))
        batch_op.create_index("idx_wgstatusrequest__wg", ["wg"], unique=False)
        batch_op.create_index(
            "idx_wgstatusrequest__principal_investigator",
            ["principal_investigator"],
            unique=False,
        )
        batch_op.create_index("idx_wgstatusrequest__person", ["person"], unique=False)
        batch_op.create_index(
            "idx_wgstatusrequest__notification", ["notification"], unique=False
        )

    with op.batch_alter_table("WBStatusRequest", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_WBStatusRequest_wb"))
        batch_op.drop_index(batch_op.f("ix_WBStatusRequest_pi_sr"))
        batch_op.drop_index(batch_op.f("ix_WBStatusRequest_person"))
        batch_op.drop_index(batch_op.f("ix_WBStatusRequest_notification"))
        batch_op.create_index("idx_wbstatusrequest__wb", ["wb"], unique=False)
        batch_op.create_index("idx_wbstatusrequest__pi_sr", ["pi_sr"], unique=False)
        batch_op.create_index("idx_wbstatusrequest__person", ["person"], unique=False)
        batch_op.create_index(
            "idx_wbstatusrequest__notification", ["notification"], unique=False
        )

    with op.batch_alter_table("User", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_User_role"))
        batch_op.drop_index(batch_op.f("ix_User_person"))
        batch_op.create_index("idx_user__role", ["role"], unique=False)
        batch_op.create_index("idx_user__person", ["person"], unique=False)
        batch_op.alter_column(
            "hazard_colors",
            existing_type=sa.JSON(),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=False,
        )
        batch_op.drop_column("time_of_creation")

    with op.batch_alter_table("Solvent", schema=None) as batch_op:
        batch_op.drop_column("time_of_creation")

    with op.batch_alter_table("Reaction_Reaction", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_Reaction_Reaction_reaction_2"))
        batch_op.create_index("idx_reaction_reaction", ["reaction_2"], unique=False)

    with op.batch_alter_table("Reaction", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_Reaction_creator"))
        batch_op.create_index("idx_reaction__creator", ["creator"], unique=False)
        batch_op.alter_column(
            "summary_table_data",
            existing_type=sa.JSON(),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=False,
        )
        batch_op.alter_column(
            "reaction_table_data",
            existing_type=sa.JSON(),
            type_=postgresql.JSONB(astext_type=sa.Text()),
            existing_nullable=False,
        )

    with op.batch_alter_table("Person_WorkGroup_3", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_Person_WorkGroup_3_workgroup"))
        batch_op.create_index("idx_person_workgroup_3", ["workgroup"], unique=False)

    with op.batch_alter_table("Person_WorkGroup_2", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_Person_WorkGroup_2_workgroup"))
        batch_op.create_index("idx_person_workgroup_2", ["workgroup"], unique=False)

    with op.batch_alter_table("Person_WorkGroup", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_Person_WorkGroup_workgroup"))
        batch_op.create_index("idx_person_workgroup", ["workgroup"], unique=False)

    with op.batch_alter_table("Person_WorkBook", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_Person_WorkBook_workbook"))
        batch_op.create_index("idx_person_workbook", ["workbook"], unique=False)

    with op.batch_alter_table("Person", schema=None) as batch_op:
        batch_op.drop_column("time_of_creation")

    with op.batch_alter_table("NovelCompound", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_NovelCompound_workbook"))
        batch_op.drop_index(batch_op.f("ix_NovelCompound_solvent"))
        batch_op.create_index("idx_novelcompound__workbook", ["workbook"], unique=False)
        batch_op.create_index("idx_novelcompound__solvent", ["solvent"], unique=False)
        batch_op.drop_column("time_of_creation")

    with op.batch_alter_table("Notification", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_Notification_person"))
        batch_op.create_index("idx_notification__person", ["person"], unique=False)

    with op.batch_alter_table("Institution", schema=None) as batch_op:
        batch_op.drop_column("time_of_creation")

    op.drop_table("ReactionNote")
    with op.batch_alter_table("ReactionDataFile", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_ReactionDataFile_reaction"))

    op.drop_table("ReactionDataFile")
    # ### end Alembic commands ###
