"""copolymers

Revision ID: fd539899cb90
Revises: 583f3c4423e8
Create Date: 2025-03-24 18:22:01.364866

"""

import sqlalchemy as sa
from alembic import op

from migrations.utils import perform_migration

# revision identifiers, used by Alembic.
revision = "fd539899cb90"
down_revision = "583f3c4423e8"
branch_labels = None
depends_on = None


def upgrade(engine_name: str):
    # test if the engine name is "default"
    if not perform_migration(engine_name):
        return
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "PolymerRepeatUnit",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.Text(), nullable=False),
        sa.Column("polymer_id", sa.Integer(), nullable=False),
        sa.Column("smiles", sa.Text(), nullable=False),
        sa.Column("molec_weight", sa.Float(precision=53), nullable=True),
        sa.Column("molec_formula", sa.Text(), nullable=False),
        sa.Column("workbook", sa.Integer(), nullable=False),
        sa.Column("time_of_creation", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["polymer_id"], ["PolymerNovelCompound.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["workbook"], ["WorkBook.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    with op.batch_alter_table("PolymerRepeatUnit", schema=None) as batch_op:
        batch_op.create_index(
            batch_op.f("ix_PolymerRepeatUnit_polymer_id"), ["polymer_id"], unique=False
        )
        batch_op.create_index(
            batch_op.f("ix_PolymerRepeatUnit_workbook"), ["workbook"], unique=False
        )

    # migrate data
    op.execute(
        """
        WITH polymer_data AS (
            SELECT
                name,
                id,
                regexp_split_to_table(smiles, '\\s*,\\s*') AS smiles,
                regexp_split_to_table(molec_weight::text, '\\s*,\\s*') AS molec_weight,
                regexp_split_to_table(molec_formula, '\\s*,\\s*') AS molec_formula,
                workbook
            FROM "PolymerNovelCompound"
        )
        INSERT INTO "PolymerRepeatUnit" (name, polymer_id, smiles, molec_weight, molec_formula, workbook, time_of_creation)
        SELECT name, id, smiles, molec_weight::double precision, molec_formula, workbook, NOW() FROM polymer_data
    """
    )

    with op.batch_alter_table("PolymerNovelCompound", schema=None) as batch_op:
        batch_op.drop_column("molec_formula")
        batch_op.drop_column("molec_weight")
        batch_op.drop_column("smiles")

    # ### end Alembic commands ###


def downgrade(engine_name: str):
    if not perform_migration(engine_name):
        return
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("PolymerNovelCompound", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column(
                "smiles",
                sa.TEXT(),
                server_default=sa.text("''::text"),
                autoincrement=False,
                nullable=False,
            )
        )
        batch_op.add_column(
            sa.Column(
                "molec_weight",
                sa.TEXT(),  # save as text to allow comma separated values
                autoincrement=False,
                nullable=True,
            )
        )
        batch_op.add_column(
            sa.Column(
                "molec_formula",
                sa.TEXT(),
                server_default=sa.text("''::text"),
                autoincrement=False,
                nullable=False,
            )
        )

    # migrate data
    op.execute(
        """
        UPDATE "PolymerNovelCompound" AS p
        SET smiles = u.smiles, molec_weight = u.molec_weight, molec_formula = u.molec_formula
        FROM (
            SELECT
                polymer_id,
                string_agg(smiles, ', ' ORDER BY id) AS smiles,
                string_agg(molec_weight::text, ', ' ORDER BY id) AS molec_weight,
                string_agg(molec_formula, ', ' ORDER BY id) AS molec_formula
            FROM "PolymerRepeatUnit"
            GROUP BY polymer_id
        ) AS u
        WHERE p.id = u.polymer_id
    """
    )

    with op.batch_alter_table("PolymerRepeatUnit", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_PolymerRepeatUnit_workbook"))
        batch_op.drop_index(batch_op.f("ix_PolymerRepeatUnit_polymer_id"))

    op.drop_table("PolymerRepeatUnit")
    # ### end Alembic commands ###
