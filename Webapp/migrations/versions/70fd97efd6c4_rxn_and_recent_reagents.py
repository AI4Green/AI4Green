"""rxn and recent reagents

Revision ID: 70fd97efd6c4
Revises: a1c950d31d0e
Create Date: 2024-07-26 12:54:34.222040

"""

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "70fd97efd6c4"
down_revision = "a1c950d31d0e"
branch_labels = None
depends_on = None

# Existing and new enum definitions
old_enum = sa.Enum(
    "RDF", "PDF", "ELN", "SURF", "CSV", "JSON", "SI", name="exportformat"
)
new_enum = sa.Enum(
    "RDF", "PDF", "ELN", "SURF", "CSV", "JSON", "SI", "RXN", name="exportformat"
)


def upgrade(engine_name: str):
    if engine_name == "audit_log":
        return None
    # Create a temporary enum type with the new values

    temp_enum = sa.Enum(
        "RDF", "PDF", "ELN", "SURF", "CSV", "JSON", "SI", "RXN", name="exportformat_tmp"
    )
    temp_enum.create(op.get_bind(), checkfirst=False)

    # Alter column to use the temporary type
    op.alter_column(
        "DataExportRequest",
        "data_format",
        existing_type=old_enum,
        type_=sa.String(),  # Temporarily change to String to allow transition
        postgresql_using="data_format::text",
    )

    # Drop the old enum type
    old_enum.drop(op.get_bind(), checkfirst=False)

    # Create the new enum type
    new_enum.create(op.get_bind(), checkfirst=False)

    # Alter column to use the new enum type
    op.alter_column(
        "DataExportRequest",
        "data_format",
        existing_type=sa.String(),
        type_=new_enum,
        postgresql_using="data_format::text::exportformat",
    )

    # Drop the temporary enum type
    op.execute("DROP TYPE IF EXISTS exportformat_tmp")

    op.create_table(
        "recently_used_compounds",
        sa.Column("workbook_id", sa.Integer(), nullable=True),
        sa.Column("compound_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["compound_id"],
            ["Compound.id"],
        ),
        sa.ForeignKeyConstraint(
            ["workbook_id"],
            ["WorkBook.id"],
        ),
    )
    with op.batch_alter_table("Compound", schema=None) as batch_op:
        batch_op.add_column(
            sa.Column("workbooks_recently_used_in_id", sa.Integer(), nullable=True)
        )
        batch_op.create_foreign_key(
            "fk_Compounds_workbooks_recently_used_in_ids_WorkBooks",
            "WorkBook",
            ["workbooks_recently_used_in_id"],
            ["id"],
        )

    # ### end Alembic commands ###


def downgrade(engine_name: str):
    if engine_name == "audit_log":
        return None
    # ### commands auto generated by Alembic - please adjust! ###
    temp_enum = sa.Enum(
        "RDF", "PDF", "ELN", "SURF", "CSV", "JSON", "SI", name="exportformat_tmp"
    )
    temp_enum.create(op.get_bind(), checkfirst=False)

    # Alter column to use the temporary type
    op.alter_column(
        "DataExportRequest",
        "data_format",
        existing_type=new_enum,
        type_=sa.String(),
        postgresql_using="data_format::text",
    )

    # Drop the new enum type
    new_enum.drop(op.get_bind(), checkfirst=False)

    # Create the old enum type
    old_enum.create(op.get_bind(), checkfirst=False)

    # Alter column to use the old enum type
    op.alter_column(
        "DataExportRequest",
        "data_format",
        existing_type=sa.String(),
        type_=old_enum,
        postgresql_using="data_format::text::exportformat",
    )
    # Drop the temporary enum type
    op.execute("DROP TYPE IF EXISTS exportformat_tmp")

    with op.batch_alter_table("Compound", schema=None) as batch_op:
        batch_op.drop_constraint(
            "fk_Compounds_workbooks_recently_used_in_ids_WorkBooks", type_="foreignkey"
        )
        batch_op.drop_column("workbooks_recently_used_in_id")

    op.drop_table("recently_used_compounds")
    # ### end Alembic commands ###
